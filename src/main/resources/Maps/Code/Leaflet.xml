<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Maps.Code.Leaflet" locale="">
  <web>Maps.Code</web>
  <name>Leaflet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>xwiki:Maps.Code.MapClass</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>Leaflet</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content/>
  <object>
    <name>Maps.Code.Leaflet</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>ebfce277-8371-4473-802b-f91065f1aa63</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>//COMMON FUNCTIONS
//Some functions are interdependent so double check before editing a function
define('leaflet-commons', ['jquery'], function ($) {
  return {

    //Take options from the element and set for supplying to the map
    setCommonMapOptions: function (element)
    {
      //Get options from the element (can be extended easily)
      var options = {};
      options.mapId = element.id;
      var zoom = element.dataset.zoom;
      options.zoom = zoom !== undefined ? zoom : 14;
      options.tiles = element.dataset.tiles !== undefined ? element.dataset.tiles : 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
      return options;
    },

    //Create an empty map and return it
    createEmptyMap: function (options)
    {
      //Create the map
      var rootScope = this,
          mapId = 'map-' + options.id,
          zoom = options.defaultZoom !== null ? options.defaultZoom : 12,
          tiles = options.tiles !== '' ? options.tiles : 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
          defaultLoc = options.defaultLocation !== '' ? options.defaultLocation : '48,2',
          map = new L.Map(mapId, {zoom: zoom, center: [48, 2]});
      this.getLocationCoords(defaultLoc, function (location) {
        map.setView(location);
        //Add a tiles layer to the map (the background)
        L.tileLayer(tiles, {
          attribution: '&amp;copy; &lt;a href="https://www.openstreetmap.org/"&gt;OpenStreetMap&lt;/a&gt; | &lt;a href="https://www.xwiki.org"&gt;XWiki&lt;/a&gt;',
          maxZoom: 17,
          id: 'mapbox.streets'
        }).addTo(map);
        //Adding the navigation control
        if (options.includeCurrentLocation == 1) {
          rootScope.addNavigation(map);
        }
        //Adding the search control
        if (options.includeSearch == 1) {
          rootScope.addSearch(map);
        }
      });
      return map;
    },

    //Remove the old marker and add a new one
    addMarker: function (oldMarker, map, e)
    {
      if (oldMarker) {
        oldMarker.remove();
      }
      return L.marker(e.latlng).addTo(map);
    },

    //Works only if the connection is secure (https etc.)
    locateUser: function (map)
    {
      var locMarker = L.circleMarker();
      map.locate({ setView: true, maxZoom: 16, watch: false });
      map.on('locationfound', function (e) {
        locMarker.remove();
        locMarker = L.circleMarker(e.latlng, {
          color: '#146ea7',
          fillColor: '#146ea7',
          fillOpacity: 0.4,
          radius: 10
        }).bindPopup('Current location').addTo(map);
      })
    },

    //Function for adding navigation control
    addNavigation: function (map)
    {
      var rootScope = this;
      L.Control.navigation = L.Control.extend({
        onAdd: function (map) {
          var container = L.DomUtil.create('div', 'leaflet-control-custom');
          var locateIcon = L.DomUtil.create('div', 'fa fa-map-marker');
          locateIcon.setAttribute('title', 'Current location');
          locateIcon.setAttribute('aria-label', 'Current location');
          container.appendChild(locateIcon);
          L.DomEvent.on(container, 'click', L.DomEvent.stopPropagation)
            .on(container, 'click', L.DomEvent.stop)
            .on(container, 'click', this._locateUser, this);
          return container;
        },
        _locateUser: function (e) {
          e.preventDefault();
          rootScope.locateUser(this._map);
        }
      });
      (new L.Control.navigation({ position: 'topright' })).addTo(map);
    },

    //Function for adding search control
    addSearch: function (map)
    {
      map.addControl(new L.Control.Search({
        url: 'https://nominatim.openstreetmap.org/search?format=json&amp;q={s}',
        jsonpParam: 'json_callback',
        propertyName: 'display_name',
        propertyLoc: ['lat', 'lon'],
        marker: L.circleMarker([0, 0], { radius: 30 }),
        autoCollapse: true,
        autoType: false,
        minLength: 2,
        position: 'topright'
      }));
    },

    //Return latlng if location is address or a string of latlng
    getLocationCoords: function (location, callback)
    {
      //Check if the location type is an address or coordinates
      var locType = 'address';
      if (location) {
        var checkLoc = location.split(',');
        //Location type is coordinates if there are two values and each is a number
        if (checkLoc.length == 2 &amp;&amp; !isNaN(checkLoc[0].trim()) &amp;&amp; !isNaN(checkLoc[1].trim())) {
          locType = 'latLng';
        }
      }
      if (locType == 'latLng') {
        //Make an array for of the two coordinates
        var latLng = location.split(',').map((val) =&gt; {
          return val.trim()
        });
        //Set the location to the array
        location = latLng;
        callback(location);
      } else {
        //If the location type is address, get the location coordinates from openstreetmap api
        var queryURL = 'https://nominatim.openstreetmap.org/search';
        var q = location;
        //Make the request
        $.getJSON(queryURL, { 'q': q, 'format': 'json' }).then(function (locFromAddress) {
          if (locFromAddress != undefined &amp;&amp; locFromAddress.length &gt; 0) {
            var latLng = [locFromAddress[0].lat, locFromAddress[0].lon];
            //Set the location to the coordinates gotten from openstreetmap api
            location = latLng;
            callback(location);
          } else {
            //Display an error if the address does not map to a location
            new XWiki.widgets.Notification('Error while geocoding the address "' + q + '" with OpenStreetMap Nominatim', 'error');
          }
        });
      }
    },

    reverseGeocode: function (location, callback)
    {
      var queryURL = 'https://nominatim.openstreetmap.org/reverse';
      //Make the request
      $.getJSON(queryURL, { 'lat': location.lat, 'lon': location.lng, 'format': 'json' }).then(function (locationInfo) {
        if (locationInfo != undefined) {
          //Set the place name gotten from openstreetmap api
          var placeName = locationInfo.display_name;
          callback(placeName);
        } else {
          callback('Place');
          //Display an error if the address does not map to a location
          new XWiki.widgets.Notification('Error while reverse geocoding the location "' + location + '" with OpenStreetMap Nominatim', 'error');
        }
      });
    },

    //Decodes the polylines (taken from @mapbox/polyline)
    decodePolyline: function (str, precision)
    {
      var index = 0, lat = 0, lng = 0, coordinates = [], shift = 0, result = 0, byte = null, latitude_change, longitude_change, factor = Math.pow(10, Number.isInteger(precision) ? precision : 5);
      while (index &lt; str.length) {
        // Reset shift, result, and byte
        byte = null;
        shift = 0;
        result = 0;
        do {
          byte = str.charCodeAt(index++) - 63;
          result |= (byte &amp; 0x1f) &lt;&lt; shift;
          shift += 5;
        } while (byte &gt;= 0x20);
        latitude_change = ((result &amp; 1) ? ~(result &gt;&gt; 1) : (result &gt;&gt; 1));
        shift = result = 0;
        do {
          byte = str.charCodeAt(index++) - 63;
          result |= (byte &amp; 0x1f) &lt;&lt; shift;
          shift += 5;
        } while (byte &gt;= 0x20);
        longitude_change = ((result &amp; 1) ? ~(result &gt;&gt; 1) : (result &gt;&gt; 1));
        lat += latitude_change;
        lng += longitude_change;
        coordinates.push([lat / factor, lng / factor]);
      }
      return coordinates;
    },

    //Gets a featureGroup of polylines that connect two paths from Open Source Routing Machine (project-osrm.org)
    generatePath: function (data, callback)
    {
      var rootScope = this;
      //Get the path as polyline from osm open source routing machine (osrm)
      //OSRM takes coords as [longitude,latitude] not [latitude,longitude]
      var sourceDestForOSRM = data.source.reverse().join() + ';' + data.destination.reverse().join();
      var queryURL = 'http://router.project-osrm.org/route/v1/car/' + sourceDestForOSRM;
      $.getJSON(queryURL, { 'alternatives': 'true', 'steps': 'true', 'geometries': 'polyline6', 'overview': 'simplified' }).done(function (osrmObject) {
        if (osrmObject.code == 'Ok') {
          //Layers/features hierarchy: routesFeatureGroup -&gt; polylineFeatureGroup -&gt; polyline ('-&gt;' means 'contains')
          var routesFeatureGroup = L.featureGroup();
          var routeColors = ['#2662c1', '#518be8', '#79a9f7', '#8eb9ff', '#b2cfff', '#b2cfff'];
          var routes = osrmObject.routes;
          //Going reverse so that the recommended route (at Array(0)) is highest in layers
          for (var i = routes.length - 1; i &gt;= 0; i--) {
            var latlngs = [];
            var polylineFeatureGroup = L.featureGroup();
            var steps = routes[i].legs[0].steps;
            var polyline;
            for (var j = 0; j &lt; steps.length; j++) {
              //Polyline is decoded from the osrm response using mapbox/polyline decode method
              polyline = L.polyline(rootScope.decodePolyline(steps[j].geometry, 6), { color: routeColors[i], weight: 7, stroke: 'white', lineCap: 'round' });
              polylineFeatureGroup.addLayer(polyline);
            }
            //Calculating the distance of the route
            var routeDistance = parseInt(parseFloat(routes[i].distance) / 1000) + ' km';
            //Calculating the duration of the route
            var routeDuration = (parseFloat(routes[i].duration) / 60).toFixed(2);
            if (routeDuration &lt; 60) {
              routeDuration = Math.ceil(routeDuration) + ' mins';
            } else {
              var durationInHours = (routeDuration / 60).toFixed(2);
              var hours = Math.floor(durationInHours);
              var mins = Math.ceil((durationInHours - hours) * 60);
              routeDuration = hours + ' hrs ' + mins + ' mins';
            }
            polylineFeatureGroup.bindPopup('&lt;b&gt;Route ' + (i + 1) + '&lt;/b&gt;&lt;br/&gt;Distance: ' + routeDistance + '&lt;br/&gt;Duration: ' + routeDuration);
            routesFeatureGroup.addLayer(polylineFeatureGroup);
          }
          callback(routesFeatureGroup);
        } else if (osrmObject.code == 'NoRoute') {
          new XWiki.widgets.Notification('Error getting path. No route found.', 'error');
        } else {
          new XWiki.widgets.Notification('Error getting path. Make sure the distance is not greater than 10000km.', 'error');
        }
      })
      .fail(function(){
        new XWiki.widgets.Notification('Error getting path. The path is not valid.', 'error');
      });
    }

  }
});</code>
    </property>
    <property>
      <name>leaflet-commons</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>Maps.Code.Leaflet</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>b67d32b1-3adb-4cc1-83a4-d20befaa80cf</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>requirejs.config({
  paths: {
    'leaflet': ['$services.webjars.url("leaflet", "leaflet.js")'],
    'leafletSearch': ['https://cdn.jsdelivr.net/npm/leaflet-search@2.9.8/src/leaflet-search'] //To be used as a webjar
  },
  shim: {
    'leaflet-search': ['leaflet']
  }
});
require(['jquery', 'leaflet', 'leafletSearch', 'leaflet-commons'], function ($, leaflet, ls, leafletCommons) {
  'use strict';
  function init()
  {
    //Create SimpleMap
    $$('.map-container').each(function (element) {
      var options = JSON.parse(element.dataset.options);
      var map = leafletCommons.createEmptyMap(options);
      var mapData = JSON.parse(element.dataset.mapdata);
      var allLayers = L.featureGroup();
      var dataLength = mapData.length - 1;
      var i = 0;
      mapData.each(function (data) {
        leafletCommons.getLocationCoords(data.location, function (location) {
          var marker;
          var popupData = '&lt;h2&gt;' + data.title + '&lt;/h2&gt;' + data.popupContent;
          if (data.markerIcon) {
            var icon = L.icon({
              iconUrl: data.markerIcon,
              iconSize: ['', 41]
            });
            marker = L.marker(location, {icon: icon}).bindPopup(popupData);
          } else {
            marker = L.marker(location).bindPopup(popupData);
          }
          allLayers.addLayer(marker);
          if(dataLength == i){
            allLayers.addTo(map);
            map.fitBounds(allLayers.getBounds());
          }
          i++;
        });
      });
    });
  }

  //Run the init() function when dom is loaded
  (XWiki &amp;&amp; XWiki.domIsLoaded &amp;&amp; init()) || document.observe('xwiki:dom:loaded', init);

});</code>
    </property>
    <property>
      <name>leaflet-main</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>Maps.Code.Leaflet</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>57be6a87-fcec-494d-b91d-aa24d9abfa0b</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>@import "$services.webjars.url('leaflet', 'leaflet.css')";
@import "https://cdn.jsdelivr.net/npm/leaflet-search@2.9.8/src/leaflet-search.css";
.map-container{
  border: 4px solid white;
  border-radius: 5px;
  box-shadow: 0px 0px 3px silver;
}
.leaflet-top{
  top: 10px;
}
.leaflet-left{
  left: 10px;
}
.leaflet-right{
  right: 10px;
}
.leaflet-bottom{
  bottom: 10px;
}
.leaflet-container .leaflet-control{
  margin: 0;
}
.leaflet-container .leaflet-control-search, .leaflet-container .leaflet-control-search:hover, .leaflet-container .leaflet-control-search:active{
  background: none;
  border: none;
}
.leaflet-container .leaflet-control-custom, .leaflet-container .leaflet-control-search .search-button, .leaflet-bar a, .leaflet-bar a:hover, .leaflet-touch .leaflet-bar a{
  background: white;
  width: 35px;
  height: 35px;
  text-align: center;
  cursor: pointer;
  border-radius: 5px;
  overflow: hidden;
  color: #444444;
  box-shadow: 0px 1px 4px 0px rgba(0, 0, 0, 0.3);
  border: none;
  transition: background-color 0.3s;
}
.leaflet-container .leaflet-control-search .search-button{
  font-family: FontAwesome;
  position: relative;
}
.leaflet-control-custom&gt;.fa, .leaflet-container .leaflet-control-search .search-button:before{
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  color: #444444;
  font-size: 20px;
}
.leaflet-container .leaflet-control-search .search-button:before{
  content: '\f002';
  font-size: 17px;
  margin-top: -2px;
}
.leaflet-container .leaflet-control-custom:hover, .leaflet-container .leaflet-control-search .search-button:hover{
  background: #f4f4f4;
  transition: background 0.3s;
  text-decoration: none;
}
.leaflet-container .leaflet-control-search input.search-input{
  box-shadow: 0px 1px 4px 0px rgba(0, 0, 0, 0.3);
  border: none;
  border-radius: 8px;
  color: #444444;
  height: 35px;
  width: 200px;
  padding: 5px 15px;
  margin: 0;
}
.leaflet-control-search .search-cancel{
  margin: 7px 0;
  right: 42px;
}
.leaflet-control-search.search-load input.search-input{
  background: white;
}
.leaflet-control-search .search-tooltip{
  border: none;
  border-radius: 8px;
  background: white;
  color: #444444;
  padding: 5px;
  left: 0;
  right: 0;
  float: right;
  overflow-x: hidden;
}
.leaflet-control-search .search-tooltip .search-tip{
  border: none;
  border-radius: 0;
  background: white;
  color: #444444;
}
.leaflet-control-container&gt;div{
  z-index: 999;
}
.leaflet-touch .leaflet-control-layers, .leaflet-touch .leaflet-bar{
  border: none;
}
.leaflet-touch .leaflet-bar a:first-child{
  border-radius: 5px;
}
.leaflet-touch .leaflet-bar a:last-child{
  border-radius: 5px;
}
.leaflet-bar a:hover{
  background: #f4f4f4;
  transition: background 0.3s;
}
.leaflet-touch .leaflet-bar a{
  line-height: 32px;
}
.leaflet-top .leaflet-control-custom, .leaflet-top .leaflet-control-search .search-button, .leaflet-top .leaflet-bar a, .leaflet-top .leaflet-bar a:hover, .leaflet-touch .leaflet-top .leaflet-bar a{
  margin-bottom: 4px;
}
.leaflet-control-search .search-alert{
  background: white;
  width: 100%;
  height: 30px;
  padding: 9px 12px;
  border-radius: 8px;
  box-shadow: 0px 1px 4px 0px rgba(0, 0, 0, 0.3);
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>leaflet-css</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
